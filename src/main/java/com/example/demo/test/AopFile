// aop 编程里面有几个通知： 前置通知 后置通知 运行通知 异常通知 环绕通知
     @Before("execution(* com.wulei.service.UserService.add(..))")
     public void before() {
     System.out.println("前置通知: 在方法之前执行...");
     }

     // 后置通知 在方法运行后执行
     @After("execution(* com.wulei.service.UserService.add(..))")
     public void after() {
         System.out.println("后置通知: 在方法之后执行...");
     }

     // 运行通知
     @AfterReturning("execution(* com.wulei.service.UserService.add(..))")
     public void returning() {
         System.out.println("运行通知:");
     }

     // 异常通知
     @AfterThrowing("execution(* com.wulei.service.UserService.add(..))")
     public void afterThrowing() {
         System.out.println("异常通知: 异常抛出执行");// 异常被try()cacth{}捕捉到则不执行。
     }

     // 环绕通知 在方法之前和之后处理事情
     @Around("execution(* com.wulei.service.UserService.add(..))")
     public void around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable{
        // 调用方法之前执行
        System.out.println("环绕通知: 调用方法之前执行");
        proceedingJoinPoint.proceed();
        /* 代理调用方法 , 如果调用方法抛出异常就不会执行后面代码。
         *
         * 在使用spring事务的时候  service最好不要try, 将异常抛出给aop 异常通知处理回滚!
         * 否则业务逻辑出错,而aop却正常执行,就会造成事务失效的情况。
         */

         // 调用方法之后执行
         System.out.println("环绕通知: 调用方法之后执行");
     }


     结果

      前置通知: 在方法之前执行...
         Exception in thread "main" 环绕通知: 调用方法之前执行
         正在添加数据
         后置通知: 在方法之后执行...
         异常通知: 异常抛出执行
         java.lang.ArithmeticException: / by zero
             at com.wulei.service.UserService.add(UserService.java:16)

}